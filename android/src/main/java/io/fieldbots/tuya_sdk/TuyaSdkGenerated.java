// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.fieldbots.tuya_sdk;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class TuyaSdkGenerated {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Device {
    private @Nullable String id;
    public @Nullable String getId() { return id; }
    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    public static final class Builder {
      private @Nullable String id;
      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      public @NonNull Device build() {
        Device pigeonReturn = new Device();
        pigeonReturn.setId(id);
        pigeonReturn.setName(name);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("id", id);
      toMapResult.put("name", name);
      return toMapResult;
    }
    static @NonNull Device fromMap(@NonNull Map<String, Object> map) {
      Device pigeonResult = new Device();
      Object id = map.get("id");
      pigeonResult.setId((String)id);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PairingToken {
    private @Nullable String token;
    public @Nullable String getToken() { return token; }
    public void setToken(@Nullable String setterArg) {
      this.token = setterArg;
    }

    private @Nullable String pairingToken;
    public @Nullable String getPairingToken() { return pairingToken; }
    public void setPairingToken(@Nullable String setterArg) {
      this.pairingToken = setterArg;
    }

    private @Nullable String region;
    public @Nullable String getRegion() { return region; }
    public void setRegion(@Nullable String setterArg) {
      this.region = setterArg;
    }

    private @Nullable String secret;
    public @Nullable String getSecret() { return secret; }
    public void setSecret(@Nullable String setterArg) {
      this.secret = setterArg;
    }

    public static final class Builder {
      private @Nullable String token;
      public @NonNull Builder setToken(@Nullable String setterArg) {
        this.token = setterArg;
        return this;
      }
      private @Nullable String pairingToken;
      public @NonNull Builder setPairingToken(@Nullable String setterArg) {
        this.pairingToken = setterArg;
        return this;
      }
      private @Nullable String region;
      public @NonNull Builder setRegion(@Nullable String setterArg) {
        this.region = setterArg;
        return this;
      }
      private @Nullable String secret;
      public @NonNull Builder setSecret(@Nullable String setterArg) {
        this.secret = setterArg;
        return this;
      }
      public @NonNull PairingToken build() {
        PairingToken pigeonReturn = new PairingToken();
        pigeonReturn.setToken(token);
        pigeonReturn.setPairingToken(pairingToken);
        pigeonReturn.setRegion(region);
        pigeonReturn.setSecret(secret);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("token", token);
      toMapResult.put("pairingToken", pairingToken);
      toMapResult.put("region", region);
      toMapResult.put("secret", secret);
      return toMapResult;
    }
    static @NonNull PairingToken fromMap(@NonNull Map<String, Object> map) {
      PairingToken pigeonResult = new PairingToken();
      Object token = map.get("token");
      pigeonResult.setToken((String)token);
      Object pairingToken = map.get("pairingToken");
      pigeonResult.setPairingToken((String)pairingToken);
      Object region = map.get("region");
      pigeonResult.setRegion((String)region);
      Object secret = map.get("secret");
      pigeonResult.setSecret((String)secret);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class TuyaSdkCodec extends StandardMessageCodec {
    public static final TuyaSdkCodec INSTANCE = new TuyaSdkCodec();
    private TuyaSdkCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Device.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return PairingToken.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Device) {
        stream.write(128);
        writeValue(stream, ((Device) value).toMap());
      } else 
      if (value instanceof PairingToken) {
        stream.write(129);
        writeValue(stream, ((PairingToken) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface TuyaSdk {
    void init(@NonNull String appKey, @NonNull String appSecret, @NonNull String username, @NonNull String password, Result<Void> result);
    void getPairingToken(@NonNull String assetId, Result<PairingToken> result);
    void connectToWifi(@NonNull PairingToken token, @NonNull String ssid, @NonNull String password, Result<Device> result);

    /** The codec used by TuyaSdk. */
    static MessageCodec<Object> getCodec() {
      return TuyaSdkCodec.INSTANCE;
    }

    /** Sets up an instance of `TuyaSdk` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, TuyaSdk api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TuyaSdk.init", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String appKeyArg = (String)args.get(0);
              if (appKeyArg == null) {
                throw new NullPointerException("appKeyArg unexpectedly null.");
              }
              String appSecretArg = (String)args.get(1);
              if (appSecretArg == null) {
                throw new NullPointerException("appSecretArg unexpectedly null.");
              }
              String usernameArg = (String)args.get(2);
              if (usernameArg == null) {
                throw new NullPointerException("usernameArg unexpectedly null.");
              }
              String passwordArg = (String)args.get(3);
              if (passwordArg == null) {
                throw new NullPointerException("passwordArg unexpectedly null.");
              }
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.init(appKeyArg, appSecretArg, usernameArg, passwordArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TuyaSdk.getPairingToken", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String assetIdArg = (String)args.get(0);
              if (assetIdArg == null) {
                throw new NullPointerException("assetIdArg unexpectedly null.");
              }
              Result<PairingToken> resultCallback = new Result<PairingToken>() {
                public void success(PairingToken result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getPairingToken(assetIdArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.TuyaSdk.connectToWifi", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              PairingToken tokenArg = (PairingToken)args.get(0);
              if (tokenArg == null) {
                throw new NullPointerException("tokenArg unexpectedly null.");
              }
              String ssidArg = (String)args.get(1);
              if (ssidArg == null) {
                throw new NullPointerException("ssidArg unexpectedly null.");
              }
              String passwordArg = (String)args.get(2);
              if (passwordArg == null) {
                throw new NullPointerException("passwordArg unexpectedly null.");
              }
              Result<Device> resultCallback = new Result<Device>() {
                public void success(Device result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.connectToWifi(tokenArg, ssidArg, passwordArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
